# test de "literal"
#okok
# coll;#t \n
vrai;
faux;
0; # toustnset
123456000;
+120309;
"nrstaun œ’æùienaruts'e.auz";
[10];
[[], "coucou", +0, 123];
[10 : 54];

# test de "declaration"
entier _0bé;
booléen Ŷ = vrai;
texte ______1 = "blabla";
liste maliste;

# test de "assignation"
Pokemon = "C'est génial!";

# test de "afficher"
afficher vrai, unevariable, "okok";

# test de "ajout"
ajouter "tropdesel" dans oops;

# test de "condition"
si archestgénial alors
{
    blabla = "I use";
    _ = blabla + " Arch";
    afficher _, " BTW";
}
si neovimestgénial # je dis juste la vérité
alors { afficher vrai;}
sinon {
    VÉRITÉ = "t'as rien capté";
    afficher VÉRITÉ, " frère";
    }

# test de "boucle"
tant que linux vaut existe faire
{afficher "être ", "heureux";}
liste LESTRUCS_IMPORTANTS = ["arch", "neovim", "linux"];
ajouter "sway" dans LESTRUCS_IMPORTANTS;
entier nombre_de_trucs_importants = 0;
pour chaque texte important dans LESTRUCS_IMPORTANTS
faire {
    afficher "Cette chose est très importante " , important;
    nombre_de_trucs_importants = nombre_de_trucs_importants + 1;
}
afficher nombre_de_trucs_importants;
pour chaque texte lettreDeLaBible dans "I use Arch btw !"
faire
{ afficher lettreDeLaBible; }

# test de "condittion"
"arch linux" vaut "null";
1 == 1;
vrai != faux;
[] ne vaut pas [ 1, 4];
3 < 56;
"a" > "A";
1 <= 1;
5 >= 4;
arch et nevim;
lapeste ou lecoléra;
non oui;
-0;
1 + 1;
54 - 34;
34 * 21;
1 / 3;

# test de "autre"
"okok"[0];
taille [1, "hey", 0];
montest = (2/(1 + 1)) * 3;

# test du projet
# rechercher un maximum
liste nombres = [1, 8, 3, 6];
entier maximum;
maximum = nombres[0];
pour chaque entier nombre dans nombres faire {
si nombre > maximum alors {
maximum = nombre;
}
}
afficher "Le maximum dans", nombres, "est", maximum;

# factoriel
entier nombre = 5;
entier factorielle;
factorielle = 1;
tant que nombre > 0 faire {
factorielle = factorielle * nombre;
nombre = nombre - 1;
}
afficher "La factorielle vaut", factorielle;

# monoticité d'une liste
liste nombres = [3, 3, 6, 7, 8];
booléen monotone = vrai;
pour chaque entier position dans [1:taille liste - 1] faire {
si liste[position] > liste[position + 1] alors {
monotone = faux;
}
}
si monotone alors {
afficher "La liste", nombres, "est monotone";
} sinon {
afficher "La liste", nombres, "n'est pas monotone";
}

# identifier un mot
texte phrase = "Bonjour à tout le monde";
texte mot = "";
liste mots = [];
pour chaque texte caractère dans phrase faire {
si caractère vaut " " alors {
si taille mot > 0 alors {
ajouter mot dans mots;
mot = "";
}
} sinon {
mot = mot + caractère;
}
}

# Potentiel dernier mot
si taille mot > 0 alors {
ajouter mot dans mots;
}
afficher mots;

